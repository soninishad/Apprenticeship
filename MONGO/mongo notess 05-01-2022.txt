
                                MONGO DB
                              ..............................
 

Path  --->  C:\Program Files\MongoDB\Server\6.0\bin
  
1.) Add the path to envoirement variables ,
     As you set the path for java or jdk path .
  
2.)   
   i) db.getCollectionNames()
  ii) show collections
 iii) show databases
 iv)
  
  
________________________________________________________________________
________________________________________________________________________
  
EXample  :-


In mongo (NoSQL) ,
                            TABLE --> Collection
                            Row   --> Document  
			                Column --> fields  ( emp_id , emp_name etc...)
							

    [
       { 
	   "_id" : ObjectId("61d863df9cc262aad0e158dd"),
	   "emp_id" : 1001,
	   "emp_name" : "ravi", 
	   "class" : "12th" 
	   } ,
     {  
      //data
     }
   ]
  
  
________________________________________________________________________
________________________________________________________________________

  
  
4 type databases
...................................... 
  Admin
  Config
  Local
  test (-->default)
  
  
 Important commands of mongodb 
................................................................................

1.  How to see collections Names :-

Note : :  ; does not work here.
     
    1.) show collections
    2.) db.getCollectionNames()
  
How to see databases list 
..........................................................

show databases	

Lets us perform :-
SQL Operations monodb :-
1. create user <user-name> identified by 1234;
2. create databases <databases-name>
     use <db-name> : if databases exist then it will be selected , otherwise it will be created and selectedd 


SQL for creating table 

create table tablename(
fieldname datatype(size),
fieldname datatype(size),
fieldname datatype(size),
fieldname datatype(size)
);



create table emp(
empId int(11) not null primary key auto_increment,
name varchar(255) not null,
salary varchar(255) not null,
dept varchar not null
);


db.createCollection("emp")


How insert to record in Emp table 
.................................................................................

insert into emp values('1001','sunny','10000','SE');
insert into emp values('1002','bunny','8000','TE');

column : key
value : value

db.insert({ empid:1001, name:"sunny", salary:10000,dept:"SE"})

{ empid:1001, name:"sunny", salary:10000,dept:"SE"}


db.collection.insert({ empid:1001, name:"sunny", salary:10000,dept:"SE"})
db.collection.insert({ empid:1002, name:"bunny", salary:8000,dept:"TE"})

select*from tablename;

db.find()
db.collectionName.find()

db.emp.find()

db.emp.insert(
[
{insert collection..... } ,
{ ...........} ,
{ ..........} 
]



1. create database mydb
2. use mydb
3. show database
4. show collections
4.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
16-11-2022
........................


1.)  It is mongodb or mangodb
      It is a mongodb.
	  
	Front Where mongodb name came from :
    mongodb name : it conveys Huge and very very 

It is a product ,mongo comminuty.
mongo company not only it make database but other cloud software.

Scope of MongoDB
...........................................

What is full-stack web-development ?
Stack : collection of languages , or technologies required by any Application is called FULL STACK.

Any person whose knowns all technologies related to web-development is called full-stack web-development.

This stack is language department:-	
1.) Python full-stack	  
2.)  	java
3) .NET
PHP
JS full-stack

Front End Technoloyg : common
.......................................
1.  HTML/CSS/Js/ Bootstrap/Tailwind/ JQuery

Database End Technoloyg
.........................................
1.  Relational database (Tables Rows & Columns ) => SQL 
          
		  i) mysql , oracle,sql server , sqlite , ms , sql ........ redshift sql.
		  
2.  Document database (Object Database | Unstructured database | No Schema Database or ArrayObject Database or 
     JSON Database or NOSQL database , BSON Database ) => SQL not allowed .
     i) mongodb
	 ii) counchdb
	 iii) memechachedb
	 iv) casendra
	 v) Apache Casino
	 vi) DynamoDB
	     ........................
         .....................
		 Cloud Paid Database.
		 
  Note : :
		 
 Backend Technoloyg
......................................
1.   Python Full Stack + Django/Fask + DRF ( Django Rest Framework )
2.   Java  (	 Core java|Advanced Java [ JSP | Servelet | JDBC | Struts | sprint | sprint Boot | Microservices | maven | Log4j ] )
3.   .NET stack ( C# , Asp.net , ADO .net , MVC , Blazor , Mvc + .netCore , Entity Framework )
4.   PHP  ( Core PHP , Advance PHP , [ PHPCli , PHPWeb , MVC , MVC Framework , { codeIgnitor and Laravel , wordpress ,
                 opencart , cms ( shopify or woocommercer )} ] )
				 
5.  JS Technoloyg
       i. MERN Stack
       ii. MEAN  stack
       iii. MEVN stack

        M  =>  Mongodb  ( NoSql database )
        X   =>  Where A , R, V 
                              A  =>  Angular-Js/Angular  : Front End Application
                              R  =>  React js
                              V  =>  Vue Js
							  
         E   =>  Express js  =>  framework of NodeJs , Backend Services Codes (API)
         N  =>  Node Js      =>  It provides Services Side Runtime Environment for server.		 

   Mongodb is build on , JS technologies .
   Using JS technology later on you can upgrade in Mobile app Developement 
  
   React      ------> mobile ---->  React Native
   Angular -------> mobile ---->  Ioinic or PhoneGap  ( Typescript )
   VueJs     -------> mobile ---->  Native-Script 

   These All are Used , to for Mobile App Development.
   React/Angular/Vue ==>  Dynamic FrontEnd  App ( SPA | single page Application ) 

   SPA  => Core language + Core Framework
  ******               ReactJs + NextJs 
	 
	                      Angular + NestJs 
               
                          VueJs   +  NuxtJs .

  
 Products of mongodb :-
 ~~~~~~~~~~~~~~~~~~~
    1.) Locally available
               i.  mongodb comminuty server  : MongoDB locally System , create server .
			              cmd => mongod  => run keep active mode .
						  
               ii.  mongodb shell  : client terminal , you can perform all database operation by connecting to mongodb server
			                                       same as mysql terminal .   
			   
               iii.  mongodb GUI Compass  : Its same as mongodb shell , but is graphics based same like phpmyadmin.
			                                                       
																   phpmyadmin GUI
																   compass  GUI 
																   
               iv.   mongodb db cli tools  :  These are externally installed , for performing database export and import ,
			                                                   and local backup .

    2.) Cloud Based 			   
				i. Cluster  : complete database or cloud , you can also get remote connection from local system .
                                       commerecially Paid .
									   
                ii.  Atlas  : free  version  
     

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~17/nov/2022~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


How to connect to Mongodb:-
***************************
1. open cmd 
2. mongod : server 
3. intial start : error cannot write data into default path : c:/data/db/
4. goto c: mkdir data cd data mkdir db

How to Run mongoclient:-
*************************
1. make sure your mongod server is running.
2. open another instance of cmd.
3. type mongo
mongo shell>
>
or  for 6. x version mongo then you need mongod shell direct run and your mongoclient willl start Running.
>db.version()


Important setting about mongo
********************************

BY default Port of (SQL) : 3306

By default port : 27017
dbPath : C:/data/db/
architecture : 64-bit
host : DESKTOP-N1OGJKU <your-pcname>
ip : 127:0:0:1 => localhost => loopback Ip Address.

[ netstat -a  -----> port ]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~18/nov/2022~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


How to create a new database :-
*******************************
1. use command : database created then select or if not it will create it.
2. how to get current db : db command
3. by default db : test

Note :
...........  During this `use` command , memory => temporary memory =>currentscope of DB Object .	
	 
Note : :  What is name of database which is present but not shown in list 
ANS :   `test` database			 
	 
Why mongodb does like this ?
1.  It is a database system , hence it is most responsibility of the mongodb that it do waste any memory.
Any database any collections is not written it will not save them in secounday memory.
	 
------> use database-name (config)


By default Object or Internal db of mongodb
****************************************************
1. show databases
2. show dbs

	1. admin 0.000GB Round Figure GB.
	2. config 0.000GB
	3. local 0.000GB
	4. test 0.000GB

db.version () => 6.0 version  : memory will shown exactly in use.
db.version () => 6.0 version  : memory will be shown in GB's .

Note :: Since the database size variation in GB, we will never be able to know any major changes in database size.

How to see list of collections in Current Database :-
**********************************************************
1. use <db-name>
2. show collections
	collection-1
	collection-2
	collection-3
	...
	collection-n
or

3. db.getCollectionNames()
	["collection-1","collection-2","collection-3","collection-n"]

show collections : Query or statement
db.getCollectionNames() : Procedure or function or sub-routine calls.

Mongo support two types of statements:-
****************************************
1. Query Statements : lower case without semicolon
2. Procedure Statements : functions calls : camelCase without semicolon.

How to see the list of records in a collection : (select * from <table-name>)
*****************************************************************************
db.<db-collection-name>.find() : using this we can find the all records stored in a collection.

How to create a new collection : (create table)
***********************************************
db.createCollection("<collection-name>")

How to insert a document-object or a Object 
*******************************************
Note :: here, one object is equivalent to row, or Record


Types of Insert
****************
1. Single Insert : Insert as Object {}
2. Bulk Insert : Insert as Array of Object [{},{},{},{}...]

db.<collection-name>.insert()

How to find the All Inserted Records:-
*************************************
db.emp.find()
{ "_id" : ObjectId("61d863df9cc262aad0e158dd"), "emp_id" : 1001, "emp_name" : "ravi", "class" : "12th" }

System 32 Bit : 12 hexadecimal Object Id.
System 64 Bit : 24 hexadecimal Object Id.


How mongodb is different from other database in terms of Automicity (Unique-ness)
....................................................................................................................................................................
	
*
Note :
	ObjectId mongodb it is universally unique , beacuse of Unix timestamp.
	
Unix Timestamp : Is total miliseconds invested , day by day from JAN 01 1970.
................................   12 : 00 : 00  Am at UTC. (Universal timestamp/timezone conversion) , as per greenwhich avg 
								time at London .  +5:30 .

Server ---> 32 Bit ---> Mysql --> Pk --> integer 11
Server ---> 64 Bit ---> Mysql --> PK --> Integer 11
Server ---> 64 Bit ---> Mysql --> PK --> BigInt 20

"_id" : Primary Key : ObjectID


Object Id : System Architecture and its minimum Architecture 32 Bit
64 Bit ---> 24 Bit
32 bit ---> 12 Bit

 Min Architecture  ------> 32 Bit  ----------> 12 Bit 
 Unitary Method : 1 Bit ObjectId  ---------> 12/32  => Ratio => 3/8 Bit .
 
 Ratio Architecture to ObjectId ----> 3:8 Bit.
	
Question :- If server specification is as followed 
..................	
		DD4 - 3X
		T1B SSD 100MBS Rd/wr speed
		16GB Ram
		Architecture 16 Bit
		OS : unix/
		
		
		What is length of ObjectId?
		Ans : 6


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 21/nov/2022~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ObjectID Breakup
....................................
4 Bytes : timestamp : hexadecimal Format 01.01.1970 12.00 am to 21-11-2022 in second timestamp
3 Bytes : Mac-address Id
2 Byte : process_id (pid)
3 Byte : Random Numbers 


61d863df9cc262aad0e158dd => some sort Hashing Algorithms.
In Application, we can store this "_id" store in session for updating and deleting the data.

update student_Table where stdid ='1001' ;
db.collection.update({_id:"61d863df9cc262aad0e158dd" } )
 
 
How to see data after bulk insert : db.emp.find()
*****************************************************

> db.emp.find()  ==> By default this is projection .
> db.emp.find().pretty()  ==> vertically  : by
> db.emp.find().projection() or db.emp.find() in version < 6.x

otherwise  in difference , projection () , pretty() , find() in version > 6.x

projection  ------>  where clause 
* ----> selection 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 22/nov/2022~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In SQL, there are two important Concept --
1. Projection  :    select*from  tablename ( Query without where clause or any condition )
2. selection    :    selection with condition like where clause , limit,group by.  

>db.collection.find()
OR 
>db.collection.find().projection()
  Data show in HORIZONTAL PROJECTION .
  
  EX :-
        { "_id" : ObjectId("61d863df9cc262aad0e158dd"), "emp_id" : 1001, 
		   "emp_name" : "ravi", "class" : "12th" }
        { "_id" : ObjectId("61d867cc9cc262aad0e158de"), "emp_id" : 1002, "emp_name" : "shyam",
     		"class" : "11th" }

db.version () =>6.x
  

{ "_id" : ObjectId("61d863df9cc262aad0e158dd"), "emp_id" : 1001, "emp_name" : "ravi", "class" : "12th" }
{ "_id" : ObjectId("61d867cc9cc262aad0e158de"), "emp_id" : 1002, "emp_name" : "shyam", "class" : "11th" }
{ "_id" : ObjectId("61d867cc9cc262aad0e158df"), "emp_id" : 1003, "emp_name" : "dubey", "class" : "10th" }
{ "_id" : ObjectId("61d867cc9cc262aad0e158e0"), "emp_id" : 1004, "emp_name" : "shyam-2", "class" : "11th" }
{ "_id" : ObjectId("61d867cc9cc262aad0e158e1"), "emp_id" : 1007, "emp_name" : "shyam-3", "class" : "9th" }
{ "_id" : ObjectId("61d867cc9cc262aad0e158e2"), "emp_id" : 1008, "emp_name" : "shyam-4", "class" : "10th" }
{ "_id" : ObjectId("61d867cc9cc262aad0e158e3"), "emp_id" : 1009, "emp_name" : "shyam-5", "class" : "11th" }
{ "_id" : ObjectId("61d867cc9cc262aad0e158e4"), "emp_id" : 1005, "emp_name" : "shyam-6", "class" : "12th" }
{ "_id" : ObjectId("61d867cc9cc262aad0e158e5"), "emp_id" : 1006, "emp_name" : "shyam-7", "class" : "10th" }


>db.collection.find().preety()
   data will be show in , Vertical format. 
   db.version() >= 6.x

EX :-

    [
       document-1 OR object-1 
       { 
	   "_id" : ObjectId("61d863df9cc262aad0e158dd"),
	   "emp_id" : 1001,
	   "emp_name" : "ravi", 
	   "class" : "12th" 
	   } ,
	  document-2 OR object-2	  
     {  
      "_id" : ObjectId("61d867cc9cc262aad0e158de"), 
      "emp_id" : 1002,
      "emp_name" : "shyam",  
      "class" : "11th" 
     }
   ]


NOTES : :
...............      Where clause ----
			  
1. select*from tablename where columnname = 'value' ;
1.  db.collection.find( {key : "value"} ) ;			  

What  are keyword in mongodb :-
*******************************
in mongodb , we have keyword like Sql syntax ( clauses)  they start with   $keyword .
                                                                                                                  ........................ 
Eg :
AND OR => SQL 
$and and $or  ----> mongo

in => sql
$in

from => sql
$from

NOTE : : THIS is not valid , in case of Operators .
 ! = => SQL ! = not Equal to  
$ne       

NOTE : :  trick : stdid = value 
                        stdid : value => equal to 
						operator  => $keyword  => as a key....
  
	   
How to fetch records on the basis of some conditions or predicates
*****************************************************************************
syntax:
db.<collection-name>.find({key:value})
SQL : select * from collection-name where key='value';
keyword in Mongo : $keyword

db.<collection-name>.find({key:{$keyword:value}})     -------> int
db.<collection-name>.find({key:{$keyword:"value"}})   -------> string
 
!= : $ne
>= : $gte
<= : $lte
< : $lt
> : $gt

Syntax  :  For OPERATOR -
db.<collection-name>.find({key:{$keyword:value}})
SQL : select * from collection-name where key!='value';


What is different B/w ?
db.collection.find()
AND 
db.collection.find( { } )

Ans :---
        db.collection.find() = db.collection.find({})

Q1   :  given , there is table emp 
emp(#empid,empname,empsal)
             |
          properties ?
               1. unique , 2. not null ,
			   
    2. Table how many primary key .
			     1Pk + Other Unique
    3.  What is Composite Key 
                 pk+Ak			
    4.  What will be query to query to in mongodb  for showing only empId .
	       empid => objectId 
		
     	 ANS :--  select empid from emp ;
        			OR 
				 db.empid.find({},{_id:1});
                      OR 
                 db.emp.find({},{empname:0,empsal:0});
				 
# -----> primary key 

NOTE : : _id or ObjectID is by default enabled in mongodb .



How to fetch records perticular columns 
***********************************************
Syntax   :   in order use collection name 
db.<collection-name>.find({conditions},{<column-names>:<0 or 1>})

0 : hide
1 : show

Mongodb ---> switch ---> All Columns are shown
			emp_id : 1
			emp_name : 1
			class :1

			emp_id : 0
			emp_name : 0
			class :0
			
Example:-
> db.student.find({},{name:1,_id:1})
{ "_id" : ObjectId("61ee2d1342556a6a994e343a"), "name" : "ravi" }
{ "_id" : ObjectId("61ee3d3442556a6a994e343b"), "name" : "sandeep" }
{ "_id" : ObjectId("61ee3d3442556a6a994e343c"), "name" : "kuldeep" }
{ "_id" : ObjectId("61ee3d3442556a6a994e343d"), "name" : "pawandeep" }
{ "_id" : ObjectId("61ee3d3442556a6a994e343e"), "name" : "Ratandeep" }


db.collection.find ({}, {} )
                               |
							 where   


ORDER BY :
************
Assending : 1  ----> by default
Deass : -1

Ex : db.emp.find() .sort({marks:-1});

Limit :
*******
db.emp.find().limit(3)

Offset :
********
db.emp.find().limit(2).skip(1)


Using And and Or Conditions in Mongodb:-
****************************************
$keyword : $and , $or
Eg:-
db.collection.find()
SQL : Select * from collection

Eg:-
db.employee.find({condition},{selection in columns})
db.collection.find({$and:})
SQL  : select * from collecton where condition = 'something' and condition = 'something';
	{$and:[{condition-key:'something'},{condition-key:'something'}]}
	
> db.student.find({$and:{name:"ravi",marks:50}})
Error: error: {
        "ok" : 0,
        "errmsg" : "$and must be an array",
        "code" : 2,
        "codeName" : "BadValue"
}
> db.student.find({$and:[{name:"ravi",marks:50}]})
{ "_id" : ObjectId("61ee2d1342556a6a994e343a"), "roll" : 1001, "name" : "ravi", "marks" : 50 }

> db.student.find({$and:[{name:"ravi",marks:50}]},{roll:1,name:1})
{ "_id" : ObjectId("61ee2d1342556a6a994e343a"), "roll" : 1001, "name" : "ravi" }


Example of How to combine Multiple Condition with Mongo-db using or
********************************************************************
> db.student.find( {$or:[{roll:1002},{marks:{$gt:50}}]}).pretty()


How to update the record in, mongodb:-
************************************

in mongodb update work on following manner => no of matching records,
if no of matching records equal = 1, update will work
if no of matching is more than one only the top most record will be updated
so inorder to, update multi-record we need specify the multi as true

syntax:
SQL : update table-name set column=value,column=value,column=value,column=value where
$condition = ...

db.collection.find({conditon},{configuration})
or 
we use $set:[{key:value},{key:value},{key:value},{key:value}]

db.collection.update({condition},{$set:{key:value,key:value,key:value}},{multi:true|false})


db.emp.update({emp_id:{$gte:1007}},{$set:{emp_name:"awnish"}},{multi:true})


How to delete the record in, mongodb:-
**********************************************
we use db.collection.remove({condition},{true|false})


Difference B/w update and delete
****************************************
by default delete deletes all the matching record
but if you want to delete only single matching records
we specify true

by default in update it updates only first record but if you
want to update all the matching records then, we specify multi=true


Upsert in Mongo-db :-
************************
upsert = update + insert
if match => 1 update (found or pre-existing)
if not match => 0 insert (Not found)

Syntax:- 
db.collection.update({condition},{key:value,key:value,key:value},{upsert:true})


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 23/Nov/022 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
offset  sql = skip mongo
order by    = limit mongo


limiting the Query:-
********************
limit(n) method : to limit the Query result set .
db.collection.limit(n)
db.emp.find().limit(n)


Result-set : Output of the Query .
.......................

Note : :
find()
sort()
pretty()
projection()
limit()
skip()

db.collection.find()  => order fix
limit and sort and skip => order not preserve

Q. 1 :- Write the Query for sql/mongodb for top most salary , student topper with max() and without max().
Max() ----> SQL :- 

SQL  :  with max
..............
1.)    select max(marks) , studenname from student .
       select max(salary) , empname from emp.
 
2. without max ()
      select*from emp order by salary desc
	  ***************************************
	  raman  : 3000    
	  ravi      :  2000  <--------- limit 2
	  ram      :  1000  <--------- limit 3
	  
	   select*from emp order by salary desc limit 1
	  
	  ***************************************
	  select*from emp Order by salary asc
	 1 | ram     | 1000
	 2 | ravi     | 2000
	 3 | raman | 3000

     db.emp.find().sort({slaary:-1}).limit(1)
     
    select * from employee where salary = ( select max (salary) from employee where salary< (select max (salary) from employee ) ); 

    select max(salary) from student = 3000
	
    select*from student where salary = (select max(salary) from student ) 	
     
        	
	 
	 
     
    sql function ----> in mongo work as keyword.
 
 

SQL Order query :-
.....................................
SELECT QUERY WHERE CLAUSE Group by Having clause Order by  Limit , Offset .


Mongo Order :-
.................................
db.collection.find().grouped by().having().sort().limit().skip()


NOTE : : Order not preserved in case of inserting a record .
               Because of No , Schema.
			   

Skipping the Query :-
************************
when we run the limit Query Top Record to n record data is fetched.
when we run the skip Query Top Record to n will skipped and Remaining data will be Returned as a result.

db.collection.find(); //All Records
db.collection.find().skip(n)

How to clear the screen
***************************
cls

How to order the data in mongodb
****************************************
since mongodb stores the data in un-structured format, there is no logical arrangement or sequence.
so in-order to manage that, user is explicitly responsible to handle it.

db.collection.sort({key:aesc|desc})
aesc = 1
desc = -1
db.collection.find().sort({key:1}) 
db.collection.find().sort({key:-1}) 

How to create the indexes in mongodb
************************************
Indexes are used or created over the perticular column or key to extract the data or performing the searching
very fast.
in local db or for less number of records creating index will not effect the performance
but definetly if you have cloud server where internet connection and large amount data like 1-lakh record
at time is the constraint.
in that case you can use the concept of indexes.

How Indexes works:-
*****************
They organise the groups into different blocks of records called as pages internally in db catalogue 
and when ever we want to fetch the records instead of searching it from top to Bottom Line by line
it will direclty jump into that page
Indexes are similar to Book Indexes

Index
*******
Unit 1 ----------------> Page 1 to 5
Unit 2 ----------------> Page 10 to 15
Unit 3 ----------------> Page 20 to 25
Unit 4 ----------------> Page 100 to 105

Older Version of Mongo:-
****************************
db.collection.ensureIndex({column_name:1})

1 :create Index
db.collection.ensureIndex() this is replace by createIndex
db.emp.createIndex({emp_id:1})

Joins and Relationships with Multiple Collection set
****************************************************

In Mongo we use embedded Data Rather Than Joins :- There is Redundant Duplicated data without Normalisation.
department Table

dept_id department
1.  Hr
2. 	Manager
3. 	Faculty

Emp Table
empid	 empname	  dept_id
1001       Ravi              1
1002       vikas             2
1003       awnish          3

Embedded Data While Inserting we insert entire data as Single Data
Embedded Document Object
{empid:1001,empname:Ravi,dept:{depid:1,department:Hr}}
{empid:1002,empname:vikas,dept:{depid:1,department:Manager}}
{empid:1003,empname:awnish,dept:{depid:1,department:Faculty}}

Pretty Output
*************
In order to Increase,display Padding in vertical we pretty function
db.collection.find().pretty()

Concept of Foriegn Key and Primary Key
***************************************
This is not Recommended way to Organise in multiple Object as a collection.
In RDBMS we have two table and we join them by the means of, Joins
using referencial Integrity B/w PK and FK
If you want store the data it is recommended to store the data in form,
in form of Embedded Data Object

we can use lookup Aggregration. to achieve this.
Syntax:
db.collection1.aggregrate({$lookup:{from:"",localField:"",ForiegnField:"",as:""}})

As soon as you as clause 2nd Collection will become as field in collection1

Trick:-
*******
 
db.createCollection("<collection>")
db.department.insert();
		|
		|if collection does not exist then also it will be created 
		|automatically.
		
db.dept.insert([
{id:1,name:"Hr"},
{id:2,name:"Faculty"},
{id:3,name:"Admin"},
])

db.emp.insert([
{empid:1001,name:"Ravi",deptid:1},
{empid:1002,name:"Mohan",deptid:1},
{empid:1003,name:"Jainab",deptid:2},
{empid:1004,name:"Tahir",deptid:3},
])

one to Many
db.dept.aggregate({$lookup:{from:"emp",localField:"id",foreignField:"deptid",as:"emp"}}).pretty()

one emp to one department
db.emp.aggregate({$lookup:{from:"dept",localField:"deptid",foreignField:"id",as:"department"}}).pretty()


______________________________________________________________________________________________________________________________________________________

                                                                          MONGO
																	............................	  


best platforms for the best package
1.mathe & reasioning;50%
2.SQL30%
3.programming :20%

minimum pacakage :3lpa to 10lpa |=>Acat and cocubes (700 ru)
minimum pacaakge:12 lpa to max |=>e-litmus=> test ph-test
minimum pacakage : arc.dev and turing.com or revel.com

prepared :-prepanista website

How to connect to Mongodb:-
***************************
1. open cmd 
2. mongod : server 
3. intial start : error cannot write data into default path : c:/data/db/
4. goto c: mkdir data cd data mkdir db

How to Run mongoclient:-
*************************
1. make sure your mongod server is running.
2. open another instance of cmd.
3. type mongo
mongo shell>
>

Important setting about mongo
********************************
By default port : 27017
dbPath : C:/data/db/
architecture : 64-bit
host : DESKTOP-N1OGJKU <your-pcname>
ip: 127.0.0.1

How to create a new database :-
*******************************
1. use command : database created then select or if not it will creat it.
2. how to get current db : db command
3. by default db : test

note::during this use command , memory=>temprary memory=>currentscope of db object
note::what is the name of database which is present but not shown in list.
ans:test database
why mongodb does like this.
it is a database system ,hence it is resposibility of the mangodb that it do wast any memory.
any database  without any collectionis not written it will not save them in secondary memory.

By default Object or Internal db of mongodb
*******************************************
1. show databases

	1. admin 0.000GB Round Figure GB.
	2. config 0.000GB
	3. local 0.000GB
	4. test 0.000GB

db.version() >= 6.8 version :memeory will shown exactly in use.
db.version() <=6.8 version :memory will be shown in GB,s

Note :: Since the database size variation in GB, we will never be able to know any major changes in database size.

How to see list of collections in Current Database :-
****************************************************
1. use <db-name>
2. show collections
	collection-1
	collection-2
	collection-3
	...
	collection-n
or
3. db.getCollectionNames()
	["collection-1","collection-2","collection-3","collection-n"]

show collections : Query or statement
db.getCollectionNames() : Procedure or function or sub-rutine calls.

Mongo support two types of statements:-
****************************************
1. Query Statements : lower case without semicolon
2. Procedure Statements : functions calls : camelCase without semicolon.

How to see the list of records in a collection : (select * from <table-name>)
*****************************************************************************
db.<db-collection-name>.find() : using this we can find the all records stored in a collection.

How to create a new collection : (create table)
***********************************************
db.createCollection("<collection-name>")

How to insert a document-object or a Object 
*******************************************
Note :: here, one object is equivalent to row, or Record

Types of Insert
****************
1. Single Insert : Insert as Object {}
2. Bulk Insert : Insert as Array of Object [{},{},{},{}...]

db.<collection-name>.insert()

How to find the All Inserted Records:-
*************************************
db.emp.find()
{ "_id" : ObjectId("61d863df9cc262aad0e158dd"), "emp_id" : 1001, "emp_name" : "ravi", "class" : "12th" }
__________________________________________________________________________________________________
************************************20/112022******************************************


how mongodb is different from other database in term of automocity(uniquness).
**********************************************************************************
note:- 
objectID mongodb it is universly uniquely,because of unix timesytemp.
unix timestemp:-it is total milisecond invested ,daya by day fom jan  01 1970 
12:00:00 AM utc (universal timestemp/timezone,conversion) as per greenwhich avg  time at London.
+5:30.before or let.

 


System 32 Bit : 12 hexadecimal Object Id.
System 64 Bit : 24 hexadecimal Object Id.
min architecture --> 32 bit---->12 bit
unitery methd :bit object id --------->12/32=>ratio=>3/8 bit
ratio architecture to object ->3:8 bit

questtion:-
if server specification is as followed
dd4-3x
tib ssd 100mb rd/wr speed 16gb ram
architecture 16 bit
os :unix center
processor 5.5ghz to 5.89ghz

Server ---> 32 Bit ---> Mysql --> Pk --> integer 11
Server ---> 64 Bit ---> Mysql --> PK --> Integer 11
Server ---> 64 Bit ---> Mysql --> PK --> BigInt 20

"_id" : Primary Key : ObjectID

Object Id : System Architecture and its minimum Architecture 32 Bit
64 Bit ---> 24 Bit
32 bit ---> 12 Bit
what is length of object id?
ans: 6

object breakup (12bit/bytes)
********************************

4 Bytes : timestamp : hexadecimal Format 01.01.1970 12.00 am to 07-01-2022  08:30:10 am +5:30 in second timestamp
3 Bytes : Mac-address Id
2 Byte : process_id (pid)
3 Byte : Random Numbers 

61d863df9cc262aad0e158dd => some sort Hashing Algorithms.
In Application, we can store this "_id" store in session for updating and deleting the data.
 
How to see data after bulk insert : db.emp.find()
*************************************************

> db.emp.find() :by default this is projection
> db.emp.find().pretty() :by
db.emp.find().projection() or db.emp.find() in version<6.x
otherwise in diference,projection(),pretty(),find
in sql there are two important concept
__________________________________________________________________________________________________
************************************22/11/2022***************************************
________________________________________________________________________________________________
1. projection. :-select * from tablename (query without where clause or any condition)

2.selection.:-selection with condition like where clause,limit,group by.
db.collection.find().pretty()
data will be show in, vertical formate.
db.version()   <=6.x

{ "_id" : ObjectId("61d863df9cc262aad0e158dd"), "emp_id" : 1001, "emp_name" : "ravi", "class" : "12th" }
{ "_id" : ObjectId("61d867cc9cc262aad0e158de"), "emp_id" : 1002, "emp_name" : "shyam", "class" : "11th" }
{ "_id" : ObjectId("61d867cc9cc262aad0e158df"), "emp_id" : 1003, "emp_name" : "dubey", "class" : "10th" }
{ "_id" : ObjectId("61d867cc9cc262aad0e158e0"), "emp_id" : 1004, "emp_name" : "shyam-2", "class" : "11th" }
{ "_id" : ObjectId("61d867cc9cc262aad0e158e1"), "emp_id" : 1007, "emp_name" : "shyam-3", "class" : "9th" }
{ "_id" : ObjectId("61d867cc9cc262aad0e158e2"), "emp_id" : 1008, "emp_name" : "shyam-4", "class" : "10th" }
{ "_id" : ObjectId("61d867cc9cc262aad0e158e3"), "emp_id" : 1009, "emp_name" : "shyam-5", "class" : "11th" }
{ "_id" : ObjectId("61d867cc9cc262aad0e158e4"), "emp_id" : 1005, "emp_name" : "shyam-6", "class" : "12th" }
{ "_id" : ObjectId("61d867cc9cc262aad0e158e5"), "emp_id" : 1006, "emp_name" : "shyam-7", "class" : "10th" }

note:-
1. select * from tablename where columnname='value'
2. db.collection.find ({key:"value"});
what are keyword in mongodb ?
********************************
in mongodb ,we have keyword like sql syntex (clauses)
they start with $keyword
eg:-
AND or =>SQL
$and and $or
in =>SQL
$IN
from =>SQL 
$from
note :: this is not valid ,in case of operators
!==> Sql != not Equal To
$ne
note: : trick :stdid=value
stdid :value=>equal to
operator=>$keyword=>as a key..

How to fetch records on the basis of some conditions or predicates
******************************************************************
syntax:
db.<collection-name>.find({key:value})
SQL : select * from collection-name where key='value';
keyword in Mongo : $keyword
db.<collection-name>.find({keyname:{$keyword:value}}): int
db.<collection-name>.find({keyname:{$keyword:"value"}}) string

!= : $ne
>= : $gte
<= : $lte
< : $lt
> : $gt

syntax :
db.<collection-name>.find({key:{$keyword:value}})
SQL : select * from collection-name where key!='value';

what is difference between db.collection.find() and db.collection.find()= db.collection.find({})
question:-1
given there is table emp,
emp(#empid,empname,empsal)
           |
         primary key
		 
properties      :- unique ,not null

que:-
..........
2.table how many primary key
1pk+other unique
3.what is composite key.
pk+AK
4:-what wiil be query to query to in mongodb for showning only empid
empid =>objected

ans:-
db.emp.find({},(_id:1});
or
db.emp.find({},{empname:0,empsal:0});

Note :
:_id or objectId is by default enabled in mongodb.

How to fetch records perticular columns 
****************************************
syntax: in order use collection name 
db.<collection-name>.find({conditions},{<column-names>:<0 or 1>})

0 : hide
1 : show

Mongodb ---> switch ---> All Columns are shown
			emp_id : 1
			emp_name : 1
			class :1

			emp_id : 0
			emp_name : 0
			class :0
			
Example:-
> db.student.find({},{name:1,_id:1})
{ "_id" : ObjectId("61ee2d1342556a6a994e343a"), "name" : "ravi" }
{ "_id" : ObjectId("61ee3d3442556a6a994e343b"), "name" : "sandeep" }
{ "_id" : ObjectId("61ee3d3442556a6a994e343c"), "name" : "kuldeep" }
{ "_id" : ObjectId("61ee3d3442556a6a994e343d"), "name" : "pawandeep" }
{ "_id" : ObjectId("61ee3d3442556a6a994e343e"), "name" : "Ratandeep" }
_____________________________________________________________________
*************26/11/2022**************

Using And and Or Conditions in Mongodb:-
****************************************
________________________________________________________________________
note:-SQL [AND] & [OR] 

$keyword : $and , $or
Eg:-
db.collection.find()
SQL : Select * from collection

Eg:-
db.employee.find({condition},{selection in columns})
db.collection.find({$and:})
SQL  : select * from collecton where condition = 'something' and condition = 'something';
	{$and:[{condition-key:'something'},{condition-key:'something'}]}
	
> db.student.find({$and:{name:"ravi",marks:50}})
Error: error: {
        "ok" : 0,
        "errmsg" : "$and must be an array",
        "code" : 2,
        "codeName" : "BadValue"
}
> db.student.find({$and:[{name:"ravi",marks:50}]})
{ "_id" : ObjectId("61ee2d1342556a6a994e343a"), "roll" : 1001, "name" : "ravi", "marks" : 50 }

> db.student.find({$and:[{name:"ravi",marks:50}]},{roll:1,name:1})
{ "_id" : ObjectId("61ee2d1342556a6a994e343a"), "roll" : 1001, "name" : "ravi" }


Example of How to combine Multiple Condition with Mongo-db using or
********************************************************************
> db.student.find( {$or:[{roll:1002},{marks:{$gt:50}}]}).pretty()

************************************
How to update the record in, mongodb:-
************************************
In Sql update is type of query , data level or record level
two types 
1 single update -with where clause - particular record.
2.bulk update-without where clause -sub me update
 

in mongodb update work on following manner => no of matching records,
if no of matching records equal = 1, update will work
if no of matching is more than one only the top most record will be updated
so inorder to, update multi-record we need specify the multi as true

syntax:
SQL : update table-name set column=value,column=value,column=value,column=value where
$condition = ...

db.collection.find({conditon},{configuration})
or 
we use $set:[{key:value},{key:value},{key:value},{key:value}]

db.collection.update({condition},{$set:{key:value,key:value,key:value}},{multi:true|false})


db.emp.update({emp_id:{$gte:1007}},{$set:{emp_name:"awnish"}},{multi:true})

How to delete the record in, mongodb:-
************************************
we use db.collection.remove({condition},{true|false})

Difference B/w update and delete
*********************************
by default delete deletes all the matching record
but if you want to delete only single matching records
we specify true

by default in update it updates only first record but if you
want to update all the matching records then, we specify multi=true

Upsert in Mongo-db :-
*********************
upsert = update + insert
if match => 1 update (found or pre-existing)
if not match => 0 insert (Not found)

Syntax:- 
db.collection.update({condition},{key:value,key:value,key:value},{upsert:true})

_______________________________________________________________________________________________________________________
************************************************23/11/2022***********************************************************

limiting the Query:-
********************
limit(n) method : to limit the Query
db.collection.limit👎
db.emp.find().limit👎
note:-
find()
sort()
projection()
limit()
skip()
db.collection.find()=>order fix
limit and sort and skip=> order not preserve
SQLorder query
******************************
select query where clause group by having clause order by limit,offset
mongodb order
***************
db.collection.find().groupBy().having().sort().limit().skip()
note:: order not preserved,in case of inserting the record.because of no schema.
QUESTION:-wreite the query of sql mongo for top most salary ,tudent topper with max()and  without max.
___
sql:-with max()
____
1:- select max(marks),studentname from student .
select max(salary),empname from emp.
2:-without max()
*************
select * from emp order by salary desc
raman | 3000
ravi     | 2000
ram     |1000
select * from emp order by salary desc limiut 1
select * from emp order by salary asc
ram       | 1000
ravi        | 2000
raman   | 3000
mongodb query:-
********************
db.emp.find().sort({salary:-1}).limit(1)

Skipping the Query :-
********************
when we run the limit Query Top Record to n record data is fetched.
when we run the skip Query Top Record to n will skipped and Remaining data will be Returned as a result.

db.collection.find(); //All Records
db.collection.find().skip👎

How to clear the screen
***********************
cls
Sql:-select*from table order by <column-name>asc|desc.
asc(a)=>1
desc(d)=>-1
note:-
by default it will sorted by assending with ref to key(column.)

How to order the data in mongodb
********************************
since mongodb stores the data in un-structured format, there is no logical arrangement or sequence.
so in-order to manage that, user is explicitly responsible to handle the ordering(sort).

db.collection.sort({key:aesc|desc})
aesc = 1
desc = -1
db.collection.find().sort({key:1}) 
db.collection.find().sort({key:-1})
**********************************************************************
 *****************************25/11/2022**************************
**********************************************************************
____________________________
very very importnt:-
________________________
SQL:-index=>0,1,3,4,5,---------------------------------n are not same as array.
[a,b,c,d,e,f,g,h,i,j,k,l,]
 0,1,2,3,4,5,6,7,8,9,
example:-
******************
for (i=0;i<arr.length;i++)
{
if(arr[i]=='j'){
return i;
}
}
select *from product where trending=1;
                                                   |
                                                    index
   SQL=>primary key,unique or index key
index=>
1.clustered
2.non-clustered
index they have ther own, data structure are of three types
*****************************************************
1.B tree (slowest)
2.B+ tree(medium)
3.hash tree(fastest)

https://www.javainuse.com/sql2mongo
______________________________________

*****************************
How to create the indexes in mongodb
************************************
*************************************
_____________________________________________

Indexes are used or created over the perticular column or key to extract the data or performing the searching
very fast.
in local db or for less number of records creating index will not effect the performance
but definetly if you have cloud server where internet connection and large amount data like 1-lakh record
at time is the constraint.
in that case you can use the concept of indexes.

********************************************
How Indexes works:-
****************************************
They organise the groups into different blocks of records called as pages internally in db catalogue 
and when ever we want to fetch the records instead of searching it from top to Bottom Line by line
it will direclty jump into that page
Indexes are similar to Book Indexes

*****************************************
Index
***************************************
Unit 1 ----------------> Page 1 to 5
Unit 2 ----------------> Page 10 to 15
Unit 3 ----------------> Page 20 to 25
Unit 4 ----------------> Page 100 to 105

Older Version of Mongo:-
****************************
db.collection.ensureIndex({column_name:1})

1 :create Index
db.collection.ensureIndex() this is replace by createIndex
db.emp.createIndex({emp_id:1})

Joins and Relationships with Multiple Collection set
****************************************************

In Mongo we use embedded Data Rather Than Joins :- There is Redundant Duplicated data without Normalisation.
department Table

dept_id department
1.  Hr
dept_id department
1.  Hr
2. 	Manager
3. 	Faculty

Emp Table
empid	empname	dept_id
1001    Ravi     1
1002    vikas    2
1003    awnish   3

Embedded Data While Inserting we insert entire data as Single Data
Embedded Document Object
{empid:1001,empname:Ravi,dept:{depid:1,department:Hr}}
{empid:1002,empname:vikas,dept:{depid:1,department:Manager}}
{empid:1003,empname:awnish,dept:{depid:1,department:Faculty}}

Pretty Output
*************
In order to Increase,display Padding in vertical we pretty function
db.collection.find().pretty()

Concept of Foriegn Key and Primary Key
***************************************
This is not Recommended way to Organise in multiple Object as a collection.
In RDBMS we have two table and we join them by the means of, Joins
using referencial Integrity B/w PK and FK
If you want store the data it is recommended to store the data in form,
in form of Embedded Data Object
we can use lookup Aggregration. to achieve this.
Syntax:
db.collection1.aggregrate({$lookup:{from:"",localField:"",ForiegnField:"",as:""}})

As soon as you as clause 2nd Collection will become as field in collection1

Trick:-
*******
 
db.createCollection("<collection>")
db.department.insert();
		|
		|if collection does not exist then also it will be created 
		|automatically.
		
db.dept.insert([
{id:1,name:"Hr"},
{id:2,name:"Faculty"},
{id:3,name:"Admin"},
])

db.emp.insert([
{empid:1001,name:"Ravi",deptid:1},
{empid:1002,name:"Mohan",deptid:1},
{empid:1003,name:"Jainab",deptid:2},
{empid:1004,name:"Tahir",deptid:3},
])

one to Many
db.dept.aggregate({$lookup:{from:"emp",localField:"id",foreignField:"deptid",as:"emp"}}).pretty()

one emp to one department
db.emp.aggregate({$lookup:{from:"dept",localField:"deptid",foreignField:"id",as:"department"}}).pretty()
*********************************************

































































         2-Nov-2022
	  *****************
  
     working with git in local system
	**************************************
	REPL :- Read Evaluate print loop : symbol of the terminal 
	related to any langauge
	
	>>> print('hi')
	hi
	> print('hi');
		syntax error
	> console.log('hi')
	cmd:\> echo hello 
	hello
	
	$ : unix or linux 
	
	Important command of Unix or Linux
	********************************************
	1. whoami : tell the owner name or pc name
	2. clear : clear the console
	3. echo : print the output or expression
	4. dir : used to list of folder and files <cmd B/W>
	5. ls : used to list down files and folders <unix terminal colorful>	 
	6. touch : used to create empty files with or without extension.
	7. mkdir : used to create folder(directory) 
	8. ls -lart
		Note --
		    cd ./ or . current Directory 
			cd ../ or .. parent Directory
	9. cd : to change the path 
		Eg : $ cd <path-name>
		
		
    Types of File and Folder
	***************************
	1. Anonymous File : with Extension but no name
	2. Named File : with name and extension or with name without extension.
	
	extension .name => extension
	without . name => firstname
	
	file fullname => firstname + extension 
	
	Types of folder:-
	*******************
	1. hidden folder : .foldername 
	2. without folder : readable folder
	
	ls and ls -lart
	******************
	ls : normal files and folder show.
	ls -lart : all hidden files and folder.
	
	ls : no count of files and folder.
	ls -lart : total no of files and folder.
	
	ls : files and folders horizontally display.
	ls -lart : vertically files and folders.
	
	ls : No files permission and meta data.
	ls -lart : shows all permission, of read,write,execute,security,sharing.
	author,when created,who created, data and time information (meta-data).
	
	rm will delete file 
	rm -r <folder-name> : delete folder (shift + delete)
	
	
	Task 1:-
	mkdir xyz   
			|--cd--> abc.txt (touch)
			
	&& : multiple statement Run at a single line
	
	How to write data inside a file 
	*******************************
	echo any statement you want to write > abc.txt
	
	How to write data inside a file 
	*******************************
	cat <filename>
	eg:
	cat abc.txt
	content at 
	
	Task Write the Two lines inside abc.txt file
	********************************************
	
	1. echo html is front end langauge > abc.txt
	2. echo python is backend langauge > abc.txt
	
	Shell file write two mode 
	1. overide mode > 
	2. append mode >>
	
	How to set Range in command
	***********************************
	$ command anyname{start..end}
    eg: 
     make 300 folders
     mkdir test{1..300}
     delete 300 folder	 
	 rm -r test{1..300}
	 
	 pwd :- print working directory 
	 display current full path
	 
	 Before  we finish with git , we must be know basic command of linux | unix .
	 that we already know .
	 
	 Basic Terminology in Git 
	 *******************************
	 1.  Versioning or version  :- 
	                                               maintianing the different changes of code is called as versioning or version.
												   
	2.  Work-space / working Directory
	          That main folder where we are working , and all our important files and folder are located .
			  
			  D:
			  |------------------------> summerTraning
			  |------------------------> winterTRaning
			  |------------------------> Apprenticship
			                                        |
													|----------------------
													            1. html
																2. css/js/php/Android/
																3.projects (work-space/working)
																            1. calculator
																			2. static-web sites
																			3. crud.project
																			
	3.  Repository :
	                        Type 1. public Repository : Everyone access 
							         2. Private Repo : No body can access only access can be done who has the access.
									  Access : owership (master|main)
									  Team :
									  forked : contributer ---------> for contributer -------> fork life cycle.
									  
									  we know that github cloud , centralizedd server connected data share.
									 
									 
        Local System
	   ...........................
			local system 
			1. Private repo. 
									 
		Scope Transfer or Visibility Transfer :-
     **********************************************
      local Repo visibility : private
      private : share own  -------> private in github
      private : share Team -------> private in github
	  private : share with Everyone -------> public in github
									 
    Different phases of Files/Floder in the Git
  *************************************************
    1. untracked                             | 
    2. tracked                                 |
    3. stage                                     |
    4. commit                                 |
    5. origin                                    |
    6. upstream	                          |
					                            
                                                Towards Downwards												
					
	we have three repository
   *****************************
    i.) local system
	         |
		   push
             |			
    ii.) your github repo
	              |
				fork/pr (pull req.)
                  |				
    iii.) others github repo	
                      |
                  pull or clone or fetch
                      |
                      |				   
	iv.)  others local system
	
	Repository :-
  ***************
     Sauhar( Pati )  ----------------------------------> Abbu (papa)                   
     				  min 1 child		
	
	Parent : workspace / working directory
	+----------------------+
	|   Folder 1       |
	|   Folder 2       |
	|   Folder 3       |  -------------------------> Repository 
	|   Folder 4       |    special folder (.git)
	|   Folder-n       |    atleast/minimun one commit (initial commit) .
   +-----------------------+	
	
	
	4.  commit  :- means save ,add the file to the .git repository
	                 
	5.  checkout :- taking back the files from .git to the original workspace or working directory  is called as , checkout.
	
	
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        
		   4-Nov-2022
       .............................


     Git Architecture :-
	 *********************
	 if you look at SVN architecture, then every commit and checkout
	 will take from central repository or server(cloud).
	 Note :: In svn not data is locally saved.
	 	 
	 but in Git data is saved locally as well as in, cloud.
	 
	important command in git:-
	************************
	$ git status : status check for file
	
	How to initialise .git repo
	*****************************
	$ ls -lart .git folder not available
	$ git init
	$ ls -lart .git/
	
	How to add files to stage (add to cache)
	*****************************************
	$ git add index.html
	
	How to add files to un-stage file (remove from cache)
	****************************************************
	$ git rm --cached index.html
	
	How to commit the changes in the file
	**************************************
	Note :: before commit your git should know you information or 
	Indentity 
	This indentity is saved in config
	
	
	How to get author information to config:-
	*****************************************
	Note :: One system has one owner  
	
	local config 
	global config
	
	single user : global
	multiple user : local
	
	How to see local and global config
	************************************
	
	$ git config --local
	$ git config --global 
	
	Author Information:-
	***************************
	git store author two details : 
	1. user.name:
	2. user.email:
	
	local Author data see
	**************************
	$ git config --local user.name
	$ git config --global user.name
	
	$ git config --local user.email
	$ git config --global user.email
	

	How to set author information to config:-
	*****************************************
	$ git config --local user.name "awnish kumar"
	$ git config --local user.email "awnish@gmail.com"
	
	
	$ git config --global user.name "awnish kumar"
	$ git config --global user.email "awnish@gmail.com"
	
	To see :-
	*********
	$ git config --global user.name
	$ git config --global user.email
	
	How to commit the changes:-
	******************************
	$ git commit -m "I have added index.html and about.html and some code"
	
	Note :: mode will changed : and All staged file ---> commit
	files will again untracked mode and will unstaged
		
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	
	Git Repository cmd 
   .......................................
   
   1.  mkdir foldername      --------> create folder
   2.  cd                                --------> change directory
   3.  git touch filename      --------> create new file (index.html , about.html)
   4.  git init                         -------->  for file initialization
   5.  ls                                 --------->
   6.  ls -lart                         --------> for check all directory files    
   7.  git add filename         --------> file in traking mode

    git branch 
   git branch soni
   git checkout soni  ----->working /swiching account
   git log
   git add.  ----> add all file current directory
   
   cat filename
   cat index.html        -------->show all  code 
   
   git checkout master
   
    git merge
    git --abort  ----> stop the merging
    git commit -m "....."
   
   ..............................................................
   
   
   
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	
   $ git branch
   * master
   
   $ checkout
   
   
   One : Important Tools very very popular ( TCS , wipro,...... infosis,.....
                    
				 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	            
 6-nov-2022
 .......................
 
 Jira :- 
 
 1.) Pms project management .
 2.) It is  
	
	
	
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

7-nov-2022
.....................

How to change the branch
*******************************



How to merge the code from one branch to another 
...................................................................................................
steps are :-
1. checkout to master branch
2. check for the head using git log ( Head  ---> master)
    NOTE : Head is recent commit in a branch.
3. Start merge using command
    $ git  merge <branch-name> at master branch
4. After that Auto-merge will happen
    check for the merge conflicts
5. check merge conflicts 

 How to merge
****************
$ git checkout master 
$ git log 
$ press q to exit from  git log is done
$ git merge <branch-name>
$ if not Error Auto-merge willl happen
$ git add .
$ git commit -m "Finally merged with any branch-name"

How stop/ kill / pause merge :
.........................................................

$ git merge --abort

How to Resolve the Conflicts :-
...........................................................

merge conflicts arises when , two coders code at branchs but write the different code on same line number
then git cannot decide which line to place and which    to delete ,
hence there arises a conflicts .

hence it will organise the code in order of commit with is Ahead another commit.

When you open a conflict files 
...........................................................
<<<<<<<<<<<<<<<<<HEAD
This is first line code
==================
This is second line code 
<<<<<<<<<<<<<<<<<prashant

hence in order 

after cleaning
*****************
1| This is first line code 
2| This is second line code 

$ git add.
$ git commit -m "code cleaned and Now ready to merge"
[new commitId ] mergeed with <new-commitId>

Different b/w git branch and git branch --all
....................................................................................

1. git branch : show all local branchs
2. remote (cloud => github )  git branch --all : local + cloud
 
 
 Help to git :-
 ........................
 
 $ git help branch
 $ git branch -d <branch-name>
 
 $ git checkout
 
 How to push , code to Github
 ..........................................................
 1. working with .gitignore
 2. touch .gitignore
     add the file-name and folder-name you dont want
 3. Decide which branch code you want to send 
 4. Update 2021 , Older time, git login from system
    username and password
    latest time :- username
    	
 1. login github 
 2. global setting
 3. devloper setting
 4. peronalise token
          simple token(classic) => Title generated token => copy
		  
 
 
 
 ////////////////////////////////////////////////////////
 
 add gallery file
 ~~~~~~~~~~~~~
 
  $ touch gallery.html
  $ git add gallery.html
  $ git status
  $ git log
 
  $ git checkout master
 
  $ git branch
 
  $ git merge dev
  
  $ git add.
  $ git commit -m "....code.here..."
  $ git log
 
 $ git checkout dev
 $ git checkout master
 
 $ touch .gitignore
 
 EX : 
 
 $ git checkout dev
 $ service.html
 $ echo this is service page added bt dev> service.html
 $ cat service.html
 $ git commit -m
 $ git log
 
 $ git branch
 $ git push -f origin dev
 
 
 ~~~~~~~~~~~~~~~
 
 $ git remote -v
 $ git remote add origin (url)
 
//////////////////////
 [ ques :- commit ID lenght ------------> 40 ]
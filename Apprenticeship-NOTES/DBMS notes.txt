  
     Sir ------->  8738970899 , 9453318798  

	
										   Database Notes Dated   ( 29-10-2022  )
								_______________________________________________		   
										   
  SQL:-
******** SQL stands for structured query language. It is used to perform database operations. 
             Based on  database operations sql is divided  in four parts:-  
			 
1. DDL (Data Definition Language)  
2. DML (Data Manipulation Language)  
3. DCL (Data Control Language)  
4. TCL (Transaction Control Language)  


Commands of DDL:-  
~~~~~~~~~~~~~~~~~
i.) Create:- create command is used to create a new database object.  
create table table_name  
create view view_name  
create user user_name  

ii.) alter:- alter command is used to modify structure of database object.  
iii.) drop:- drop command is used to delete database object.  
iv.) truncate:- truncate command is used to delete all data from database object. 
v.) backup:- backup command is used to take backup of database.  
vi.) restore:- restore command is used to reconstruct database from its backup.

 Commands of DML:-  
 ~~~~~~~~~~~~~~~~~
 
i.) insert:- The insert command is used to insert record into database object (table,view). 
ii.) delete:- The delete command is used to delete record from database object.  
iii.) update:- The update command is used to modify record in database object.  
iv.) select:- The select command is used to select records from database object. 


Commands of DCL:-  
~~~~~~~~~~~~~~~~~~~

i.) grant:- grant command is used to give rights to database user.  
ii.) revoke:- revoke command is used to take off rights from database user. It is just opposit to grant  command.  
iii.) rename:- rename command is used to change name of database object.  

Commands of TCL:-  
~~~~~~~~~~~~~~~~~~

i.) commit:-commit command is used to save transaction.  
ii.) rollback:- rollback command is work like undo. 



Use of create command to create a new user:-  
---------------------------------------------------------------------------
Syntax:-  

create user <username> identified by <password>;  



E.g.  
create user app2022 identified by test;  


Use of grant command to give rights to user:-  
----------------------------------------------------------------------------

Syntax:-  

grant <rights> to <username>;  

E.g.  
grant dba to app2022; 

	
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@	
                  
      				    SQL    [ 30-oct-2022]
                     *********
					 
					 
Use of create command to create a new table :-
........................................................................................

Table :- Table is a collection of rows and columns.
           Rows are called tuple and columns are called Attributes.
		   
Syntax to create Table :

create table <tablename>
(
<column1>  <datatype> ,
<column2>  <datatype> ,
<column3>  <datatype> 
) ;

Eg :- 

Table Name :- employee
empid                  int                               primary key
empname          varchar2(30)
department        varchar2(20)
salary                  int


Primary Key :- Primary key is a field in a table , which is used to identify each record uniquely . 
                        It is atomic and not null.
						
						
create table employee
(
empid  int primary key ,
empname  varchar2(30) ,
department varchar2(20) ,
salary   int 
);

						
	(table dekhne ) cmd -----> description employee;
	desc employee;
	1. connect table
    2. desc employee;	
						
Use of insert command to insert record into table :-
....................................................................................................					
Syntax :-

insert into <tablename> values
(<value1> , <value2> , <value3> );


For Eg :-

insert into employee values ( 1001, 'soni', 'Development' , 45000);

Use of select command  to select records from table :- 
.........................................................................................................

select*from employee;

[ sable rows select krne ----->{ * } (select*from employee;) ]






Ques:-
     EMPID           EMPNAME                        DEPARTMENT               SALARY
   --------------        ------------------------                -------------------------               ----------
      1001                soni                                      CSE                        50000
      1002              soumya                                    IT                          20000
      1003                 Ajay                               management               80000
      1004                 Nisha                                      HR                       40000
      1005               Shikha                              development               50000
	  
Sol :-	  
insert into employee values(1001,'soni','development' ,20000);
insert into employee values(1002,'ajay','management' ,40000);
insert into employee values(1003,'nisha','HR' ,30000);
insert into employee values(1004,'Shikha','development' ,50000);

______________________________________________________________________________________________________________________________________

Use of insert command to insert data in specific columns if table :-

Syntax :-

insert into <tablename> (<column1> , <column2>)
 values( <values1> , <values2> ) ;
 
 
 Eg : 
 
 insert into employee ( empid , empname , department)
 values (1006 , 'mehak' , 'development');
 
 _________________________________________________________________________________________________
 
 Use of select command :-
 ~~~~~~~~~~~~~~~~~~~~
 1. Use of select command to select all columns of table.
 
 select*from<tablename>;
 select*from employee ; 
 
 
 2. Use of select command to select specific columns.
 
 select <column1> , <column2> from <tablename>;
 select empid , empname ,salary from employee;
 

Use of where clause :-
                                     Where clause is used to specify condition in SQL statement .
			
select*from <tablename> where <condition>;

Eg : 
     select*from employee where empid=1001;

{* ----> sabhi column ko select krna}			
		

______________________________________________________________________________________________________________________________________
		
                   Operators in SQL
				 **********************

   =                        equality
   >                        greator than
   <                        less than				 
   >=                      greator than or equal to 
   <=                      less than  or equal to
   <>                      not equal 
   in                      Compare value in given values 
   between            Check whether given value is available in given range or not 
   like                    This operator is used for pattern matching .
 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Use of delete command to delete record from table :-

Syntax : 

delete from <tablename> where <condition>;
delete from  empid where empid=1002;



Use of UPDATE command to modify record of table :-
Syntax :

update <tablename> set <column1>=<value1>,
<column2>=<value2> where <condition>;

Eg :
update employee set salary=40000 where empid=1006;  


 Use of truncate command :-
 
 Syntax :-
 truncate table <tablename>;
 truncate table employee;

 
 Use of drop :-
 
 Syntax :
 
 drop table<tablename>;
 drop table employee ;
 
 
 commit;         -------> for save the data.
 
 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 
 TASK  :----
 ---------------
 
 ID Task Signatures with Date 
Student Coordinator 
1.1 i) Create a database user with user name “mydb and password “mydb”. 
ii) Give privileges of DBA to the user “mydb”.
 
1.2 Connect the database user “mydb” and create a table cust_info with following structure:-
Field Name Datatype Constraint
Cust_Id Number(5) Primary Key
Cust_Name Varchar(20) 
Cust_Address Varchar(100) 
Cust_connect_date Date
Contact_No Varchar(15) 
 
1.3 i) Insert the following records in cust_info table:-
Cust_Id     Cust_Name           Cust_Address         Cust_connect_date           ContactNo
101           Rajeev Singh          Lucknow                 12-dec-2012                    05226565114
102           Jitendra Verma      Sitapur                   01-Jan-2013                     9838505980
103           Ravi Singh              barabanki               15-Jan-2013                    9936652039
104           priya Singh             Lucknow                16-Jan-2013                     9936390301
105           Brijesh Mishra        barabanki              16-Feb-2013                     8738970899
106           Amit Singh             Lucknow                18-mar-2013                   0548-2202798

ii) Perform commit command. 
 
1.4 Perform select operation based on following instruction:-
i) Select all record with its all fields. 
ii) Select all records with its Cust_Id and Cust_Name field. 
iii) Select those record in which the Cust_connect_Date is after 15-Jan-2013, select 
only Cust_Id Cust_Name and Cust_connect_Date fields. 
iv) Select those records in which the Custmoer belongs from “Lucknow”. 
v) Display all records of Cust_info table in ascending order on Cust_Name field. 
vi) Display all records of Cust_info table in descending order on Cust_Name field. 
 
1.5 i) Delete the record of Cust_info table having CustId 105.
ii) Update the record of Cust_info table having Cust_Id 106(Update ContactNo with 
new value 0522-6767144). 
iii) Perform truncate command with Cust_info table. 
iv) Perform drop command to delete Cust_info table

 
 
Solution :-
~~~~~~~~~~ 

~~~~~~~~~~~~~ Create ........

a.)   connect system/system;

b.)   create  user mydb identified by mybd;

c.)   grant dba to mydb;
 
~~~~~~~~~~~~~~  connect ........
 
SQL> connect mydb/mydb;
Connected.

SQL> 
     create table  cust_info
      (
      Cust_Id Number(5) Primary Key,
      Cust_Name Varchar(20) ,
      Cust_Address Varchar(100) ,
      Cust_connect_date Date,
      Contact_No Varchar(15)
       );

Table created.

SQL> desc cust_info;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 CUST_ID                                   NOT NULL       NUMBER(5)
 CUST_NAME                                                   VARCHAR2(20)
 CUST_ADDRESS                                             VARCHAR2(100)
 CUST_CONNECT_DATE                                         DATE
 CONTACT_NO                                                VARCHAR2(15)
 
 
 insert  into cust_info values ( 101,' Rajeev Singh', 'Lucknow', '12-dec-2012', '05226565114');
 insert  into cust_info values (102 ,'Jitendra Verma', 'Sitapur' , '01-Jan-2013' , '9838505980');
 insert  into cust_info values (103 ,'Ravi Singh' ,'barabanki' , '15-Jan-2013', '9936652039');
 insert  into cust_info values (104 , 'priya Singh' , 'Lucknow' , '16-Jan-2013', '9936390301');
 insert  into cust_info values (105, 'Brijesh Mishra' ,'barabanki' , '16-Feb-2013' , '8738970899');    9453318798
 insert  into cust_info values (106 , 'Amit Singh' ,'Lucknow' , '18-mar-2013' , '0548-2202798');
 
 
4( i ).  select*from cust_info;
  (ii).   commit;
         desc cust_info;
  (ii).   select Cust_Id , Cust_Name from cust_info;
  (iii).  select Cust_Id , Cust_Name , Cust_connect_date from     cust_info  where cust_connect_date>'15-jan-2013';        
  (iv).   select*from cust_info where CUST_ADDRESS = 'Lucknow';
 
  Order By :-
                  Order by is used to display records in ascending or decending order.
  
  (v).    select  cust_id , cust_name from cust_info order by cust_name;    
 
        For decending Order :- 
   (vi)    select  cust_id , cust_name from cust_info order by cust_name desc;

 5.
 (i).   delete from cust_info where cust_id=105;
 (ii).   update cust_info set contact_no='0522-6565114'
          where cust_id=106; 
(iii).   truncate table cust_info;		  
(iv).  drop table cust_info;
 
 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 
 31-Oct-2022
 ---------------------
 
 Order By :-  Order by is used to display records in ascending or decending order.
     	 
 Use of alter command :-
 ...............................................
 
 alter :- The alter command is used to modify structure of database object.
 
 create table login
 ( 
 userid  varchar2(20) primary key ,
 password varchar2(20)
);

Use of alter command to ADD a NEW column :-
........................................................................................

Syntax :- 

         alter table <tablename> add <column_name> 
		 <data_type>;

   Eg :-
       alter table login  add usertype varchar2(20);


Use of alter command to DELETE column :-
...............................................................................

Syntax :

 alter table <table_name> drop column  <column_name>;


Eg :
      alter table login  drop column usertype; 
	  
	  
Use of alter command to Modify column :             
................................................................................

* datatype  change ----> modify 

Syntax :
     
	alter table <tablename> modify <column_name> <data_type>;

Eg :-
     alter table login modify password varchar2(10);
  	

Use of alter command to RENAME column :-
...............................................................................
Syntax :

    alter table <tablename> rename column <old_name> to <new_name>;

Eg :
       alter table login rename column password to paswd;	


___________________________________________________________________________________________________________________________________________

Use of RENAME command to change name of database object :-
....................................................................................................................

Syntax :
 
    rename <old_name> to <new_name>;

Eg :
          rename login to logininfo;


[ kitni table h hamare database me ,
Table ----> select*from tab;
]

___________________________________________________________________________________________________



create table employee
(
empid number (5) primary key ,
empname varchar2(30) ,
salary number(8)
);

insert into employee values (1001,'soni', '35000');
insert into employee values (1002,'priya', '40000');
insert into employee values (1003,'muskan', '30000');


_________________________________________________________________________________________________

               SQL FUNCTIONS 
			--------------------------------   

SQL has many built-in functions.
These functions are used with select command.


1.) Sum() :-  sum()  function is used to find sum of values of given column.
    -----------
Eg : 
          select sum(salary) from employee;

          select sum(salary) "Total salary" from employee;


2.)  max() :-  max()  function is used to find maximum value in given column.
    --------------
Eg :
        select max(salary) "Maximum salary" from employee ;

3.)  min()  :- min() function is used to find minimun value in given column .
    ---------------
Eg :
        select min(salary) "Minimum salary" from employee ;


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

  1-nov-2022
 ......................

1.)  Count() :- The count() function in Sql is used to count number of rows in a table.

eg :
      select count(*) "No. of rows" from employee;

2.)  Upper()  :-  The upper() function convert string data into upper case .

eg :  
      select upper(empname) "Employee Name" from employee ;  

3.)  lower()  :-  The lower() function convert string data into lower case .

eg : 
       select lower(empname) "Employee Name" from employee ;  

4.)  avg()   :- The avg() function is used to find average of values in given column .
            eg :  select avg(salary) "Average salary " from employee;
	  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	  
	  
Nested  Query : -  If you use  a sql query inside another sql query , then it is called nested query .
                             It is also called subquery .

Example :  1.   Write a SQL statement to find record with largest salary in employee table .
                      select *from employee where salary = ( select max(salary) from employee );


Example : 2.   Write a SQL statement to find record with second largest salary in employee table. 

select * from employee where salary = ( select max (salary) from employee where salary< (select max (salary) from employee ) ); 


Ex : 3.   Write a SQL statement to find record with minimun salary in employee table .

select*from employee where salary = ( select min(salary) from employee);

Ex : 4.   Write a SQL statement to find record with second minimum salary in employee table. 
             select*from employee where salary = ( select min (salary) 
                    from employee where salary > (select min (salary) from employee));


Join Operation   :  
*******************    If you want to select data from two tables , then you need perform join operation .
                                 For join operation atleast one column should be common in both tables.

Foreign  key :  Foreign key is a field in a table which works as primary key in another table.
                        Foreign key is used to establish relationship in two tables .
						 
NOTES : There can be more than one foreign key in a table.

Ques :- 
...........

i) Create the table empinfo & product 

create table empinfo 
(
empid         number(5)    primary key, 
empname   varchar2(20)
);

create table product 
(
pid          number(5) primary key ,
pname    varchar2(20),
empid     number(5),
foreign key (empid) references empinfo(empid)
);

ii) Insert the record in empinfo tbale & product

insert into empinfo values (1001 , 'john');
insert into empinfo values (1002 , 'Brown');
insert into empinfo values (1003 , 'Smith');
insert into empinfo values (1004 , 'lily');


insert into product values (101 , 'printer' , 1001);
insert into product values (102 , 'Scanner' , 1002);
insert into product values (103 , 'Plotter', 1002);
insert into product values (104 , 'laptop' , 1003);
insert into product(pid ,pname) values (105,'projector');


Natual  Join Operation :
**************************

select empname , pname from empinfo , product 
where empinfo.empid=product.empid;

Left Join Operation :
......................................  When you perform left join operation then all records of left table are displayed and
								    matching records of right table are displayed . 
									
select empname,pname from  empinfo left join product on empinfo.empid=product.empid;



Rigth join Operation : 
........................................... When you perform right join operation then all records of right table are displayed and
								       matching records of left table are displayed . 

select empname,pname from  empinfo right join product on empinfo.empid=product.empid;

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

TASK : 2
.....................

i)  connect mydb/mydb;

ii)
    create table login_info
    (User_id  number(5) primary key,
    passwd  varchar2(10) 
    );

iii)    desc login_info;

iv)    alter table login_info add hint_ques varchar2(30);
        desc login_info;
v)    alter table login_info drop column hint_ques;
           desc login_info;
		   
vi)  alter table login_info modify passwd varchar(15);		   

 2)  
 create table employees
   (
    employee_id number(5) not null ,
    employee_name varchar2(20) 
    );

i)
 create table orders
      (
      product_id  number(5) not null ,
      product varchar2(20) ,
      employee number(5) null
     );

ii)   insert into employees values (1001 , 'karan');
       insert into employees values (1002 , 'shikhar');
       insert into employees values (1003 , 'rajan');

commit ;

select*from employees;

iii)   insert into orders values (1, 'table',1001 );
       insert into orders values ( 2,  'chair' ,1002 ) ;
       insert into orders values (3, 'printer' ,1003 );

commit;

select*from orders;


i)    select employee_name,product from employees , orders
       where employees.employee_id=orders.employee_id;

ii)   select employee_name,product from employees left join       orders  on employees.employee_id=orders.employee_id;

iii)   select employee_name,product from employees right join orders on employees.employee_id=orders.employee_id;





@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
2-Nov-2022
*************

View:- View is a logical table, which is created from another table (main table). Main table is affected
with the change in view.

We create a table with name spiemp having fields empid, empname, grade and salary.

create table spiemp
(
empid number(5) primary key,
empname varchar2(30),
grade varchar2(2),
salary number(8)
);

Now we create a view with fields empid and empname.
.......................................................................................................

create view emp as (select empid,empname from spiemp);
insert into emp values(1001,'Brijesh');
insert into emp values(1002,'Prashant');
insert into emp values(1003,'Seema');
insert into emp values(1004,'Shubham');
delete from emp where empid=1004;

Use of like operator:-
......................................  like operator is used to match a pattern in data values.

create table student
(
rollno number(5) primary key,
name varchar2(30),
branch varchar2(20)
);

insert into student values(1001,'Ajay Singh','CS');
insert into student values(1002,'Priya Singh','IT');
insert into student values(1003,'Brijesh Mishra','CS');
insert into student values(1004,'Prashant Seth','CS');

i.) select records of students with 'Singh' surname.

select * from student where name like '%Singh';

ii.) select records of students whose name is started from 'P'.

select * from student where name like 'P%';

Composit Key or Candidate Key:- If you use more than one fields for identification of record uniquely.
                                                       Then resultant key is called as composit key or candidate key.

create table shipment
(
S# varchar2(5),
P# varchar2(5),
QTY number(8),

primary key(S#,P#)
);


Check:- Check constraint is used to apply validation in table.

Example:- Create a table with name 'staff' with following validations.
................

fieldname datatype validation
empid varchar2(10) Check empid must start with 'SPI'
empname varchar2(20) Check empname must be in upper case.
country varchar2(5) Check country must be either 'India' or 'Nepal'
salary number(6) Check salary not more than 100000.

create table staff
(
empid varchar2(10) check(empid like 'SPI%'),
empname varchar2(20) check(empname=upper(empname)),
country varchar2(5) check(country in ('India','Nepal')),
salary number(6) check(salary<=100000),
primary key(empid)
);

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

   Two types 
   1. Ansi Standard
               i.) Natural 
                       a.) Equi-join
                       b.)  

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  
                                                                  TASK -3
                                                                ......................
 
connect system/system;
connect app2022/test;
 
1.1)
     create table client_master
     (
     client_no  varchar2(6),
     name         varchar2(20),
     city            varchar2(15),
     state          varchar2(15),
     bal_due     number(10,2)
    );

=>
  
  insert  into  client_no
  
1.2)
      create table sales_order_details
       (
        detlorder_no    varchar2(6),
        product_no  	  varchar2(6),
        QTY ordered     number(8),
        QTY_disp          number(8),
        product_rate     number(8)
       );	

1.3)
       create table sales_order
        (
         Order_no           varchar2(6),
         Client_no 		    varchar2(6), 
         Order_date         date
		 Detlorder_no      varchar2(6) foreign key 
		 );
     
1.4)
        

  




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
     3-Nov-2022
   ..........................	 
  
                                                   PL/SQL
												************   
                           
Write a PL/SQL code to print Hello World on Screen.

begin
dbms_output.put_line('Hello World');
end;
 /


 set  serveroutput on
 begin
dbms_output.put_line('Hello World');
end;
 /

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 How to create variable in PL/SQL
 
 variablename datatype;
 a int;
 b int;
 
 How to store value in variable?
    a:=100;
	b:=100;
______________________________________________________________________________________________________________________________________

1.) Write a PL/SQL code to find sum two numbers.
Sol:-
         declare
            a int;
            b int;
	    begin
           a:=100;	
           b:=200;	
     dbms_output.put_line(a+b);
      end;
         /	  



 declare
            a int;
            b int;
	    begin
           a:=100;	
           b:=200;	
     dbms_output.put_line('Summation='||(a+b));
      end;
         /	 


2.) Write a PL/SQL code to make a simple calculator.
    declare
      a int;
      b int;
    begin
      a:=&a;
      b:=&b;
    dbms_output.put_line('Summation='||(a+b));
    dbms_output.put_line('Subtraction ='||(a-b));
    dbms_output.put_line('Multiplication ='||(a*b));
    dbms_output.put_line(' Division ='||(a/b));
    end;
     /
 
-----------> Enter value for a : 100 
-----------> User se input lene ke liye  a:=&a;  ------> & => input ------->

3.)  Write a PL/SQL code to calculate area or perimeter of area of rectangle.
Sol : 
 Type 1 :-
...............
 
        declare
		  a int;
		  b int;
		begin
         a:=&a;
         b:=&b;		 
        dbms_output.put_line('Area  of rectangle = ' ||(a*b));
         dbms_output.put_line('Perimeter  of rectangle = ' ||(2*(a+b)));
         end;
		 /

Type 2:-
..............

        declare
           l int;
		   b int;
		   a int;
		   p int;
        begin
           l:=&l;
           b:=&b;
           a:=l*b;
           p:=2*(l+b);
        dbms_output.put_line('Area = '||a); 		   
		dbms_output.put_line('Perimeter = '||p); 		
		end;
		/
    
	
Decision Control : - Decision controls aee used for decision making.
................................. 
             
i) If statement : if is a keyword , which works as decision control . we attach a condition with if statement ,
                          if condition is true  then code will excuted and if given condition is false then code will not excuted .
						  
    Syntax :
  ...................    if condition then
					          /* code */
                        end if;  					   
			   
ii) If-Else Statement :  if-else is a variation of if statement .
                                    we attach a condition with if statement . If given condition is true then if block code will excuted 
									and if given condition is false then else block code will excuted.
 
    Syntax :
  ...................     if condition then
                             /*code1*/						
						else
                             /*code2*/
                        end if;							 
                                    
4.) Write a PL/SQL code to check given numberis even or Odd . 
        declare 
		  n int;
		begin
 		  n:=&n; 
         if n mod 2=0 then 
        dbms_output.put_line('Number is even');
         else 
		dbms_output.put_line('Number is odd');
		 end if;
         end;
		/

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  
  3-Nov-2022
 **************

                                                       Database SessionLecture - 6 
													**********************************
													
Introduction To PL/SQL 
***************************
The PL/SQL programming language was developed by Oracle Corporation in the late 1980s as procedural  extension language for SQL and the Oracle relational database. Following are certain notable facts about  PL/SQL − 

❖PL/SQL is a completely portable, high-performance transaction-processing language. 
❖PL/SQL provides a built-in, interpreted and OS   independent programming environment. 
❖PL/SQL can also directly be called from the command-line SQL*Plus interface.
❖Direct call can also be made from external programming language calls to database.

PL/SQL Blocks 
*****************
Every PL/SQL statement ends with a semicolon (;). PL/SQL blocks can be nested within other PL/SQL  blocks using BEGIN and END. 

Following is the basic structure of a PL/SQL block − 
.................................................................................................

DECLARE  
<declarations section> 
 
BEGIN  
<executable command(s)>  

EXCEPTION  
<exception handling>  

END;
______________________________________________________________________________________________________________________________________

Hello World Example 
.........................................

DECLARE  
message varchar2(20):= 'Hello, World!';  BEGIN  
dbms_output.put_line(message);  
END;  
/  

The above code will display Hello, World! Message.
______________________________________________________________________________________________________________________________________

Simple Calculator Code In PL/SQL DECLARE  
.....................................................................................
a int; 
b int; 
BEGIN  
a:=&a; 
b:=&b; 
dbms_output.put_line(‘Summation=’||(a+b)); 
dbms_output.put_line(‘Subtraction=’||(a-b)); 
dbms_output.put_line(‘Multiplication=’||(a*b)); 
dbms_output.put_line(‘Division=’||(a/b)); 
END;  
/ 

______________________________________________________________________________________

Syntax Of If & If Else Statements  
.............................................................

Syntax of If Statement:- 
..........................................

If condition then 
/* If block code*/ 
End if; 

Syntax of If Else Statement:-
......................................................
 
If condition then 
/* If block code */ 
Else 
/* Else block code*/ 
End if;

Example Application - 1 
----------------------------------------

Develop a PL/SQL code to check given no. is even or odd.

DECLARE  
n int; 

BEGIN  
n:=&n; 
If n mod 2==0 then 
dbms_output.put_line(‘The number is even’); 
Else 
dbms_output.put_line(‘The number is odd’); 
End if; 
END;  
/ 

Syntax Of Ladder If Else If condition1 then 
....................................................................................

/* Code 1 */ 
Elsif condition2 then 
/* Code 2 */ 
Elsif condition3 then 
/* Code 3*/ 
Else 
/* Code 4 */ 
End If; 

Example Application - 2 
...............................................

/*  

Write a PL/SQL code to make a electricity bill calculator. 

Unit                                               Bill 
1-150                                             2.40/unit 
For next 151-300                          3.00/unit 
For next more than 300               3.20/unit 

*/
______________________________________________________________________________________

Example Application – 2 (cont..)

DECLARE  
unit number(5,2); 
bill number(10,2);  

BEGIN  
unit:=&unit; 

If unit<=150 then 
bill:=unit*2.40; 

Elsif unit>150 and unit<=300 then 
bill:=(150*2.40)+(unit-150)*3.00; 

Else 
bill:=(150*2.40)+(150*3.00)+(unit-300)*3.20; End if; 
dbms_output.put_line(‘Your bill is : ’||bill); END;  
/ 


Loops In PL/SQL 
.................................
PL/SQL Basic Loop:-
......................................
 In this loop structure, sequence of statements is enclosed between the LOOP and the END  LOOP statements. At each iteration, the sequence of statements is executed and then control resumes at the top of  the loop. 
 
PL/SQL While Loop:- 
......................................
Repeats a statement or group of statements while a given condition is true. It tests the  Condition before executing the loop body. 

PL/SQL For Loop:- 
....................................
Execute a sequence of statements multiple times and abbreviates the code that manages the  loop variable.

PL/SQL Basic Loop 
*********************

Syntax of PL/SQL basic Loop:-
........................................................

Loop 
/* Code */ 
End Loop;

Example Application - 3 
~~~~~~~~~~~~~~~~~~~~

Develop a PL/SQL code to print 1-5 numbers using basic loop. 

declare 
a number(5):=1; 
begin 
dbms_output.put_line(‘Program started’); 
Loop 
dbms_output.put_line(a); 
a:=a+1; 
Exit when a>5; 
End loop; 
dbms_output.put_line(‘Program completed’); 
End; 
/

PL/SQL While Loop 
.......................................

It works like an entry-check loop in which execution block will not even be executed once if the condition is  not satisfied, as the exit condition is checking before execution part. It does not require keyword 'EXIT'  explicitly to exit from the loop since it is validating the condition implicitly each time of the loop. 

Syntax Of While Loop:- 
.........................................

WHILE <EXIT condition>  
LOOP  
<execution block starts>  
.  
.  
.  
<execution_block_ends>  
END LOOP;

Example Application - 4 
~~~~~~~~~~~~~~~~~~~~~

DECLARE  
a NUMBER :=1;  
BEGIN  
dbms_output.put_line('Program started');  WHILE (a <= 5)  
LOOP  
dbms_output.put_line(a);  
a:=a+1;  
END LOOP;  
dbms_output.put_line(‘Program completed' );  END; 
/


PL/SQL For Loop 
..................................

"FOR LOOP" statement is best suitable when you want to execute a code for a known number of times rather  than based on some other conditions. 

In this loop, the lower limit and the higher limit will be specified and as long as the loop variable is in between  this range, the loop will be executed. 

FOR <loop_variable> in <lower_limit> .. <higher_limit>  
LOOP <execution block starts>  
.  
.  
.  
<execution_block_ends>  
END LOOP;

Example Application - 5 
~~~~~~~~~~~~~~~~~~~~~

BEGIN  
dbms_output.put_line(‘Program started.' );  FOR a IN 1 .. 5 LOOP  
dbms_output.put_line(a);  
END LOOP;  
dbms_output.put_line('Program completed.');  END;  
/
 
 

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   
    4-Nov-2022
  ***************

 1.) Write a PL/SQL code to find greatest number in three unique numbers.
 
  [ a, b, c
    a>b and a>c -----> a
    b>a and b>c -----> b ]

 [ Note :- connect
              server connect 
			  then code 
			  ]


declare
a int;
b int;
c int;
begin 
a:=&a;
b:=&b;
c:=&c;
if a>b and a>c then 
dbms_output.put_line('Greatest Number ='||a);
elsif b>a and b>c then
dbms_output.put_line('Greatest no. = '||b);
else
dbms_output.put_line('Greatest number = '||c);
end if;
end;
/

______________________________________________________________________________________

SALARY calculator :-
........................................
 ba  ---> basic salary
 gs  ---> gross salary
 hra ---> house  rent allownsence
 da --->


create table account
(
empid number(5) primary key,
bs number(10,5),
hra number(10,5),
da number(10,5),
gs number(10,5)
);


1.)  Write PL/SQL code to take basic salary as input and calculate hra , da and gs based on given parameters.
      now save value of bs , hra , da and gs in account table.

Basic                            HRA                           DA
1-4000                         10%                            50%  
4000-8000                   20%                            60%
8000-12000                 25%                            70%
More than 12000        30%                             80%   

declare
empid number(5);
bs number(10,5);
hra number(10,5);
da number(10,5);
gs number(10,5);
begin
empid:=&empid;
bs:=&bs;
if bs<=4000 then
hra:=(bs*10)/100;
da:=(bs*50)/100;									 
elsif bs>4000 and bs<=8000 then 
hra:=(bs*20)/100;
da:=(bs*60)/100;
elsif bs>8000 and bs<=12000 then 
hra:=(bs*25)/100;
da:=(bs*70)/100;
else 
hra:=(bs*30)/100;
da:=(bs*80)/100;
end if;
gs:=bs+hra+da;
dbms_output.put_line('Gross Salary ='||gs);
insert into account values(empid,bs,hra,da,gs);
commit;
end;
/


3.)  Write PL/SQL code to print numbers from 1-10 .
      
declare 
n number(3);
begin 
n:=1;
loop 
dbms_output.put_line(n);  
n:=n+1;
exit when n>10;
end loop;
end;
/ 


While loop :-
.......................  


Write a PL/SQL code to print  table of given number.

declare
n int;
i int;
t int;
begin 
n:=&n;
i:=1;
while i<=10
loop 
t:=n*i;
dbms_output.put_line(t);
i:=i+1;
end loop;
end;
/

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

 05-Nov-2022
 .........................
 
 1.  
 create table  Accounts
 (
 accountID   varchar2(10)  check(accountID like 'AC%' ),
 name           varchar2(30),
 balance int ,
 primary key(accountID)
 );
 
   insert into Accounts values ('AC001','Ajay',5000);
   insert into Accounts values ('AC002','Robert',10000);
   insert into Accounts values ('AC003','Mita',5000);  
   insert into Accounts values ('AC004','Sunita',15000);
   insert into Accounts values ('AC005','Melba',10000);

--------------------------------------------------
   
	1.) Write a PL/SQL code block that  will accept an account number from user and debit an amount of RS. 2000 from the account 
		 if the account has a minimun balance of 2000 after the amount is debited . This process is to be fired on accounts table. 
		
		declare
		acno varchar2(10);
		bal int;
        begin 
        acno:=&acno;
        select balance into bal from accounts where AccountID=acno;
        bal:=bal-2000;
        if bal>=2000 then 		
        update accounts set balance=bal where accountID=acno;
        dbms_output.put_line( 'Amount is Debited');
         commit;
         else		 
         dbms_output.put_line('Unsufficient balance');
         end if;
		 end;
		  /
 
----------------------------------------------------------------------------------------------------
         2.)   
         create table exp 
		 (
		 empid varchar2(10) check(empid like'E%'),
		 empname varchar2(30),
		 salary number(6),
		 primary key(empid)
		 );
		 
         insert into exp values ('E001','Harry',5000);		 
         insert into exp values ('E002','Blake',1000);	
	     insert into exp values ('E003','Jack',5000);	
    	 insert into exp values ('E004','Clark',1000);	

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

7-nov-2022
......................

Machine test (self)


1.)
connect system/system;

create user testdb identified by test;

2.)
grant dba  to testdb;
 
 3.)
connect testdb/test;
 
 4.)
 create table customer 
 (
 id         varchar2(10) primary key , check (id like 'C%') ,
 name    varchar2(30) check(name=upper(name)),
 city       varchar2(28) check(city in ('lucknow','kanpur')),
 contactno    varchar2(10)
 );
 
 desc customer;
 
 5.)
insert into customer values ('C1001','Brijesh Mishra','Lucknow',9453318798); 
insert into customer values ('C1002', 'RAJAT SINGH','Lucknow', 9450150719);
insert into customer values ('C1003','DISHA SINGH','Kanpur', 9936652039);
insert into customer values ('C1004', 'AJAY VERMA','Kanpur' 9838505980);

commit;

select*from customer;

6.)
selcet*from customer where city='lucknow';
7.)
select*from customer where 

8.)
select id name from customer;
9.)
  select name from customer order by name;    
 10.)
  select  name from customer order by name desc;     
 
 
 11.) create prodect table:--
 
 create table product
 (
 pid  number(5) primary key ,
 pname   varchar2(30),
id             varchar2(10) ,
foreign key (id) references customer(id) 
); 

12.)
insert into customer values('101',laptop','C1001',);
insert into customer values('102',projector','C1002',);
insert into customer values ('103',scanner','C1002',);
insert into customer values ('104',laptop','C1003',);

inser into customer ('pid','pname') values('105','printer');

13.)

select name , pname from customer ,product where customer.id=product.id;

14.)

	select name ,pname from customer left join product on customer.id=product.id								



select name,pname from customer right join product on 
customer.id=product.id;

15.)

create table staff
(
staffid      number(5) primary key ,
name        varchar2(30),
salary       number(8)
);


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



                                                      Database Machine Test Solution Phase 
                                                  ********************************************************

Solution of Database Machine Test Phase - 1 :-

1.
create user testdb identified by test;

2.
grant dba to testdb;

3.
connect testdb/test;

4.
create table customer
(
id varchar2(10) check(id like 'C%'),
name varchar2(30) check(name=upper(name)),
city varchar2(8) check(city in('Lucknow','Kanpur')),
contactno varchar2(10),
primary key(id)
);

5.
insert into customer values('C1001','BRIJESH MISHRA','Lucknow','9453318798');
insert into customer values('C1002','RAJAT SINGH','Lucknow','9450150719');
insert into customer values('C1003','DISHA SINGH','Kanpur','9936652039');
insert into customer values('C1004','AJAY VERMA','Kanpur','9838505980');

6.
i.)
select * from customer where city='Lucknow';
ii.)
select * from customer where name like '%SINGH';
iii.)
select id,name from customer;
iv.)
select * from customer order by name;
v.)
select * from customer order by name desc;

7.
create table product
(
pid number(5) primary key,
pname varchar2(30),
id varchar2(10),
foreign key(id) references customer(id)
);

8.
insert into product values(101,'Laptop','C1001');
insert into product values(102,'Projector','C1002');
insert into product values(103,'Scanner','C1002');
insert into product values(104,'Plotter','C1003');
insert into product(pid,pname) values(105,'Printer');

9.
i.)
select name,pname from customer, product where customer.id = product.id;

ii.)
select name, pname from customer left join product on customer.id=product.id;

iii.)
select name, pname from customer right join product on customer.id=product.id;

10.

create table staff
(
staffid number(5) primary key,
name varchar2(30),
salary number(8)
);

11.

create view stf as (select staffid,name from staff);

12.

insert into stf values(1001,'Nisha');
insert into stf values(1002,'Ravi');

13.

declare
a int;
b int;
c int;
begin
a:=&a;
b:=&b;
c:=&c;
if a>b and a>c then
dbms_output.put_line('Greatest No='||a);
elsif b>a and b>c then
dbms_output.put_line('Greatest No='||b);
else
dbms_output.put_line('Greatest No='||c);
end if;
end;
/

14.
declare
n int;
i int;
c int;
begin
n:=&n;
c:=0;
i:=1;
while i<=n loop
if n mod i=0 then
c:=c+1;
end if;
i:=i+1;
end loop;
if c=2 then
dbms_output.put_line('Prime');
else
dbms_output.put_line('Non-prime');
end if;
end;
/


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

             Machine test-2
			................................


1.)
connect testdb/test;

2.)
create table employee
(
empid number(5) primary key,
empname varchar2(30),
department varchar2(20),
salary number(8)
);

3.)
insert into employee values(1001,'Ravi Singh','Management',80000);
insert into employee values(1002,'Brijesh Mishra','Development',45000);
insert into employee values(1003,'Rajat Verma','Management',50000);
insert into employee values(1004,'Krishna','Development',35000);
insert into employee values(1005,'Nisha Singh','HR',38000);

4.)

i.)
select * from employee where department='Development';
ii.)
delete from employee where empid=1005;
iii.)
update employee set department='Management', salary=60000 where empid=1002;
iv.)
select * from employee where salary=(select max(salary) from employee);
v.) 
select * from employee where salary=(select max(salary) from employee where salary<(select max(salary) from employee));
vi.)
truncate table employee;
vii.)
drop table employee;

5.)

create table elect_bill
(
id number(5) primary key,
unit number(5),
bill number(10,5)
);

6.)

declare
id number(5);
unit number(5);
bill number(10,5);
begin
id:=&id;
unit:=&unit;
if unit<=150 then
bill:=unit*2.40;
elsif unit>150 and unit<=300 then
bill:=(150*2.40)+(unit-150)*3.00;
else
bill:=(150*2.40)+(150*3.00)+(unit-300)*3.20;
end if;
dbms_output.put_line('Your Bill='||bill);
insert into elect_bill values(id, unit, bill);
commit;
end;
/

7.)
 
declare
ch int;
c number(10,5);
f number(10,5);
begin
dbms_output.put_line('Enter 1 for c to f');
dbms_output.put_line('Enter 2 for f to c');
ch:=&ch;
if ch=1 then
c:=&c;
f:=(9*c)/5+32;
dbms_output.put_line('Temperature in f='||f);
elsif ch=2 then
f:=&f;
c:=(f-32)*5/9;
dbms_output.put_line('Temperature in c='||c);
else
dbms_output.put_line('Invalid choice');
end if;
end;
/

8.)

declare
n int;
r int;
s int:=0;
begin
n:=&n;
while n>0 loop
r:=mod(n,10);
s:=s+r;
n:=trunc(n/10);
end loop;
dbms_output.put_line('Sum of digit = '||s);
end;
/

9.)
Ques:-	Print table of given number.
..........

declare 
n int;
i int;
begin
n:=&n;
i:=1;
while i<=10 loop
t:=n*i;
dbms_output.put_line(t);         
i:=i+1;
end loop;
end;
/

10.)

declare
bnum int;
dec int:=0;
n int:=0;
r int;
begin 
bnum:=&Input_Number_In_0_And_1;
while bnum>0 loop
r:=mod(bnum,10);
dec:=dec+r*power(2,n);
bnum:=trunc(bnum/10);
n:=n+1;
end loop;
dbms_output.put_line('Decimal Number='||dec);
end;
/











	



